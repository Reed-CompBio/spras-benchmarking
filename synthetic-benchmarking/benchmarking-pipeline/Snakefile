configfile: "config.yaml"

algorithms = config["algorithms"]
pathways = config["pathways"]

rule all:
    input:
        expand("output/images/network/{algorithms}_{pathways}_spras.png", algorithms=algorithms, pathways=pathways),
        expand("output/images/network/{algorithms}_{pathways}_panther.png", algorithms=algorithms, pathways=pathways),
        expand("output/stats/edges/{algorithms}_{pathways}_stats.txt", algorithms=algorithms, pathways=pathways),
        expand("output/stats/score/{algorithms}_{pathways}.txt", algorithms=algorithms, pathways=pathways),
        expand("output/images/auc/individual/{algorithms}_{pathways}_roc.png", algorithms=algorithms, pathways=pathways),
        expand("output/images/auc/individual/{algorithms}_{pathways}_pr.png", algorithms=algorithms, pathways=pathways),
        expand("output/images/auc/combined/{algorithms}.png", algorithms=algorithms),
        expand("output/images/auc/combined/{pathways}.png", pathways=pathways)

rule pathway_image:
    input:
        spras=lambda wildcards: f"networks/{wildcards.algorithms}/{wildcards.pathways}/spras.txt",
        panther=lambda wildcards: f"networks/{wildcards.algorithms}/{wildcards.pathways}/panther.txt"
    output:
        spras_image="output/images/network/{algorithms}_{pathways}_spras.png",
        panther_image="output/images/network/{algorithms}_{pathways}_panther.png"
    script:
        "scripts/generate_network.py"

rule pathway_stats:
    input:
        spras=lambda wildcards: f"networks/{wildcards.algorithms}/{wildcards.pathways}/spras.txt",
        panther=lambda wildcards: f"networks/{wildcards.algorithms}/{wildcards.pathways}/panther.txt"
    output:
        stats="output/stats/edges/{algorithms}_{pathways}_stats.txt"
    script:
        "scripts/generate_stats.py"

rule generate_scores:
    input:
        spras=lambda wildcards: f"networks/{wildcards.algorithms}/{wildcards.pathways}/spras.txt",
        panther=lambda wildcards: f"networks/{wildcards.algorithms}/{wildcards.pathways}/panther.txt"
    output:
        score="output/stats/score/{algorithms}_{pathways}.txt",
    script:
        "scripts/generate_scores_file.py"

rule generate_auc_image:
    input:
        score=lambda wildcards: f"output/stats/score/{wildcards.algorithms}_{wildcards.pathways}.txt",
    output:
        roc="output/images/auc/individual/{algorithms}_{pathways}_roc.png",
        pr="output/images/auc/individual/{algorithms}_{pathways}_pr.png",
    script:
        "scripts/generate_auc.py"

rule generate_algorithm_auc:
    input:
        scores=lambda wildcards: expand(
            "output/stats/score/{algorithms}_{pathways}.txt",
            algorithms=wildcards.algorithms,
            pathways=config["pathways"] 
        )
    output:
        pr="output/images/auc/combined/{algorithms}.png"
    script:
        "scripts/generate_algorithm_auc.py"

rule generate_pathway_auc:
    input:
        scores=lambda wildcards: expand(
            "output/stats/score/{algorithms}_{pathways}.txt",
            algorithms=config["algorithms"],
            pathways=wildcards.pathways
        )
    output:
        pr="output/images/auc/combined/{pathways}.png"
    script:
        "scripts/generate_algorithm_auc.py"